#!/usr/bin/env python3

# 
# Marc Schoechlin <ms@256bit.org>
# Marc Schoechlin <marc.schoechlin@vico-research.com>

import json
import subprocess
import sys
import os
import argparse
import datetime
import time
import fcntl
import socket
import re
import glob
import logging
from pyzabbix import ZabbixMetric, ZabbixSender

from pprint import pprint, pformat

from modules.osd_measures import OsdStats
from modules.helpers import file_is_locked, debug_cmd, execute_cmd, check_on_leader, get_daemons




########################################################################################################################
###
### MAIN

parser = argparse.ArgumentParser(
    description='collect data from ceph environments'
)

parser.add_argument('--loglevel',
                    type=str,
                    nargs='?',
                    help='the name of the python loglevel',
                    default="INFO",
                    )

parser.add_argument(
    '--dryrun',
    help='simulation mode',
    action='store_true',
)

parser.add_argument('--frequency',
                    type=int,
                    nargs='?',
                    help='seconds',
                    default=120,
                    )

parser.add_argument('--discovery_deadline',
                    type=int,
                    nargs='?',
                    help='seconds',
                    default=(3600*3),
                    )

parser.add_argument('--regex_filter',
                    type=str,
                    nargs='?',
                    help='regex to match imagenames',
                    default=".*",
                    )

parser.add_argument('--zabbix_host',
                    type=str,
                    nargs='?',
                    help='The zabbix host',
                    default=socket.gethostname()
                    )

args, pools = parser.parse_known_args()

lockfile = "/tmp/ceph_collector.lock"

if file_is_locked(lockfile):
    print('ERROR: another instance is running, exiting now')
    sys.exit(0)

root_logger = logging.getLogger()

root_logger.setLevel(args.loglevel)

count = 0

osd_stats = OsdStats(args)

try:
   while True:
        count += 1
        logging.info("measurement loop %s (loop time %s seconds, discovery deadline %s seconds)" % (count, args.frequency, args.discovery_deadline))
        osd_stats.collect()
        time.sleep(args.frequency)
except KeyboardInterrupt:
   logging.info("request for termination, exiting")
   sys.exit(1)
